import os
import torch
os.environ["NVFUSER_ENABLE"] = "io_to_lower_precision"
from nvfuser import FusionDefinition, DataType

def nvfuser_fusion_id9(fd : FusionDefinition) -> None :
    T0 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, True], dtype=DataType.BFloat16, is_cpu=False, stride_order=[2, 1, 0])
    T1 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, True], dtype=DataType.Float, is_cpu=False, stride_order=[2, 1, 0])
    T2 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[None, None, True], dtype=DataType.BFloat16, is_cpu=False, stride_order=[2, 1, 0])
    T3 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, True], dtype=DataType.BFloat16, is_cpu=False, stride_order=[2, 1, 0])
    T4 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, True], dtype=DataType.BFloat16, is_cpu=False, stride_order=[2, 1, 0])
    T5 = fd.define_tensor(shape=[-1, -1, -1], contiguity=[True, True, None], dtype=DataType.Float, is_cpu=False, stride_order=[2, 1, 0])
    T6 = fd.define_tensor(shape=[-1, -1, 1], contiguity=[True, True, None], dtype=DataType.Float, is_cpu=False, stride_order=[2, 1, 0])
    T7 = fd.ops.cast(T0, dtype=DataType.Float)
    S8 = fd.define_scalar(16, dtype=DataType.Int)
    S9 = fd.define_scalar(128, dtype=DataType.Int)
    S10 = fd.define_scalar(1600, dtype=DataType.Int)
    V11 = fd.define_vector([S8, S9, S10], dtype=DataType.Int)
    T12 = fd.ops.broadcast_in_dim(T6, shape=V11, broadcast_dims=[0, 1, 2])
    T13 = fd.ops.mul(T1, T12)
    T14 = fd.ops.cast(T2, dtype=DataType.Float)
    T15 = fd.ops.cast(T3, dtype=DataType.Float)
    T16 = fd.ops.cast(T4, dtype=DataType.Float)
    T17 = fd.ops.sum(T16, dims=[0, 1], keepdim=False, dtype=DataType.Null)
    T18 = fd.ops.cast(T17, dtype=DataType.BFloat16)
    T19 = fd.ops.mul(T16, T14)
    T20 = fd.ops.mul(T16, T13)
    T21 = fd.ops.sum(T20, dims=[0, 1], keepdim=False, dtype=DataType.Null)
    T22 = fd.ops.cast(T21, dtype=DataType.BFloat16)
    T23 = fd.ops.mul(T19, T12)
    T24 = fd.ops.mul(T19, T1)
    T25 = fd.ops.sum(T24, dims=[2], keepdim=False, dtype=DataType.Null)
    S26 = fd.define_scalar(16, dtype=DataType.Int)
    S27 = fd.define_scalar(128, dtype=DataType.Int)
    S28 = fd.define_scalar(1, dtype=DataType.Int)
    V29 = fd.define_vector([S26, S27, S28], dtype=DataType.Int)
    T30 = fd.ops.broadcast_in_dim(T25, shape=V29, broadcast_dims=[0, 1])
    T31 = fd.ops.neg(T23)
    T32 = fd.ops.sum(T31, dims=[2], keepdim=False, dtype=DataType.Null)
    S33 = fd.define_scalar(16, dtype=DataType.Int)
    S34 = fd.define_scalar(128, dtype=DataType.Int)
    S35 = fd.define_scalar(1, dtype=DataType.Int)
    V36 = fd.define_vector([S33, S34, S35], dtype=DataType.Int)
    T37 = fd.ops.broadcast_in_dim(T32, shape=V36, broadcast_dims=[0, 1])
    S38 = fd.define_scalar(-0.500000, dtype=DataType.Double)
    T39 = fd.ops.mul(S38, T30)
    S40 = fd.define_scalar(3.00000, dtype=DataType.Double)
    T41 = fd.ops.pow(T6, S40)
    T42 = fd.ops.mul(T39, T41)
    T43 = fd.ops.sum(T37, dims=[2], keepdim=False, dtype=DataType.Null)
    T44 = fd.ops.sum(T42, dims=[2], keepdim=False, dtype=DataType.Null)
    S45 = fd.define_scalar(16, dtype=DataType.Int)
    S46 = fd.define_scalar(128, dtype=DataType.Int)
    S47 = fd.define_scalar(1, dtype=DataType.Int)
    V48 = fd.define_vector([S45, S46, S47], dtype=DataType.Int)
    T49 = fd.ops.broadcast_in_dim(T44, shape=V48, broadcast_dims=[0, 1])
    S50 = fd.define_scalar(16, dtype=DataType.Int)
    S51 = fd.define_scalar(128, dtype=DataType.Int)
    S52 = fd.define_scalar(1600, dtype=DataType.Int)
    V53 = fd.define_vector([S50, S51, S52], dtype=DataType.Int)
    T54 = fd.ops.broadcast_in_dim(T49, shape=V53, broadcast_dims=[0, 1, 2])
    S55 = fd.define_scalar(2.00000, dtype=DataType.Double)
    T56 = fd.ops.mul(S55, T54)
    T57 = fd.ops.sub(T7, T5)
    T58 = fd.ops.mul(T56, T57)
    S59 = fd.define_scalar(1600.00, dtype=DataType.Double)
    S60 = fd.ops.reciprocal(S59)
    T61 = fd.ops.mul(T58, S60)
    S62 = fd.define_scalar(16, dtype=DataType.Int)
    S63 = fd.define_scalar(128, dtype=DataType.Int)
    S64 = fd.define_scalar(1, dtype=DataType.Int)
    V65 = fd.define_vector([S62, S63, S64], dtype=DataType.Int)
    T66 = fd.ops.broadcast_in_dim(T43, shape=V65, broadcast_dims=[0, 1])
    S67 = fd.define_scalar(16, dtype=DataType.Int)
    S68 = fd.define_scalar(128, dtype=DataType.Int)
    S69 = fd.define_scalar(1600, dtype=DataType.Int)
    V70 = fd.define_vector([S67, S68, S69], dtype=DataType.Int)
    T71 = fd.ops.broadcast_in_dim(T66, shape=V70, broadcast_dims=[0, 1, 2])
    S72 = fd.define_scalar(0.000625000, dtype=DataType.Double)
    T73 = fd.ops.mul(S72, T71)
    T74 = fd.ops.add(T61, T73)
    T75 = fd.ops.add(T23, T74)
    T76 = fd.ops.add(T15, T75)
    T77 = fd.ops.cast(T76, dtype=DataType.BFloat16)
    fd.add_output(T18)
    fd.add_output(T22)
    fd.add_output(T77)

with FusionDefinition() as fd:
    nvfuser_fusion_id9(fd)

inputs = [
    torch.randn((3276800,), dtype=torch.bfloat16, device='cuda:0').as_strided((16, 128, 1600), (204800, 1600, 1)),
    torch.randn((3276800,), dtype=torch.float32, device='cuda:0').as_strided((16, 128, 1600), (204800, 1600, 1)),
    torch.randn((1600,), dtype=torch.bfloat16, device='cuda:0').as_strided((16, 128, 1600), (0, 0, 1)),
    torch.randn((3276800,), dtype=torch.bfloat16, device='cuda:0').as_strided((16, 128, 1600), (204800, 1600, 1)),
    torch.randn((3276800,), dtype=torch.bfloat16, device='cuda:0').as_strided((16, 128, 1600), (204800, 1600, 1)),
    torch.randn((2048,), dtype=torch.float32, device='cuda:0').as_strided((16, 128, 1600), (128, 1, 0)),
    torch.randn((2048,), dtype=torch.float32, device='cuda:0').as_strided((16, 128, 1), (128, 1, 1)),
]
fd.execute(inputs)
