// clang-format off
/*
 * SPDX-FileCopyrightText: Copyright (c) 2023-present NVIDIA CORPORATION & AFFILIATES.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 */
// clang-format on
namespace nvfuser.serde;

// This indicates the flatbuffer compatibility. The number will bump up when a
// breaking change is applied to the schema.
file_identifier "NV00";

// Datatype enum represents the data type of a Tensor, Scalar, or Function.
enum DataType:int {
    Double = 0,
    Float,
    Half,
    Int,
    Int32,
    Bool,
    BFloat16,
    ComplexFloat,
    ComplexDouble,
    None
}

// The StateType enum is used to indicate the whether the state object is a
// Scalar or Tensor.
enum StateType:int {
    Tensor = 0,
    Scalar,
    None,
}

enum Contiguity:int {
    Strided = 0,
    Contiguous,
    None,
}

// Each RecordFunctor is assigned a RecordType for the hash function.
// Otherwise, the record type is determined via the success of dynamic casting.
// We enumerate the template arguments of a RecordFunctor, so we can specify
// them during deserialization.
enum RecordType:int {
    Base = 0,
    BatchNormOp,
    BroadcastOp,
    BroadcastInDim,
    BroadcastInDimSymbolic,
    CastTv,
    CastVal,
    CatOp,
    ConstantBool,
    ConstantInt,
    ConstantDouble,
    ConstantComplexDouble,
    End,
    FullOp,
    IotaOp,
    IndexSelectOp,
    TorchGatherOp,
    TakeAlongAxisOp,
    Unary_TV,
    Unary_VAL,
    Binary_TV,
    Binary_VAL,
    Binary_TV_VAL,
    Binary_VAL_TV,
    Ternary_TV,
    Ternary_VAL,
    Ternary_TV_TV_VAL,
    Ternary_TV_VAL_TV,
    Ternary_VAL_TV_TV,
    Ternary_VAL_VAL_TV,
    Ternary_TV_VAL_VAL,
    Ternary_VAL_TV_VAL,
    Ternary_Alpha_TV,
    Ternary_Alpha_VAL,
    Ternary_Alpha_TV_TV_VAL,
    Ternary_Alpha_TV_VAL_TV,
    Ternary_Alpha_VAL_TV_TV,
    Ternary_Alpha_VAL_VAL_TV,
    Ternary_Alpha_TV_VAL_VAL,
    Ternary_Alpha_VAL_TV_VAL,
    OutputTv,
    OutputVal,
    PadOp,
    PermuteOp,
    RandomOp,
    ReductionMax,
    ReductionMin,
    ReductionProd,
    ReductionSum,
    ReshapeOp,
    Scalar,
    SliceOp,
    SqueezeOp,
    Start,
    Tensor,
    TensorSizes,
    VarianceOp,
    VarianceMeanOp,
}

// The RecordData hold the attribute information for each Record Functor.
union RecordData {
  BatchNorm,
  Bool,
  Broadcast,
  BroadcastInDim,
  BroadcastInDimSymbolic,
  ComplexDouble,
  Double,
  Dtype,
  Dimension,
  Int,
  Norm,
  Output,
  Pad,
  Permute,
  Slice,
  Squeeze,
  Reduction,
  Reshape,
  Tensor,
  TensorCreation,
  TensorCreationSymbolic,
}

// Data for Constant Bool
table Bool {
  bool_val: bool;
}

// Data for Constant Double or Float
table Double {
  double_val: double;
  dtype: DataType;
}

// Data for Constant Int or Long
table Int {
  int_val: long;
  dtype: DataType;
}

// Data for BatchNormOpRecord
table BatchNorm {
  training: bool;
  channels_last: bool;
}

// Data for BroadcastOpRecord
table Broadcast {
  broadcast_dims: [bool];
}

// Data for BroadcastInDimOpRecord<int64_t>
table BroadcastInDim {
  output_shape: [long];
  broadcast_dims: [long];
}

// Data for BroadcastInDimOpRecord<nvfuser::State>
table BroadcastInDimSymbolic {
  output_shape: [State];
  broadcast_dims: [long];
}

// Data for Constant Complex Double or Float
table ComplexDouble {
  real: double;
  imag: double;
  dtype: DataType;
}

// Data for CastOpRecord, ScalarRecord, and IotaOpRecord
table Dtype {
  dtype: DataType;
}

// Data for TorchGatherOpRecord, TakeAlongAxisOpRecord, and IndexSelectOpRecord
table Dimension {
  dim: long;
}

// Data for NormOpRecord
table Norm {
  axes: [int];
  correction: long;
  keep_dim: bool;
}

// Data for OutputRecord
table Output {
  stride_order: [long];
}

// Data for PadOpRecord
table Pad {
  pad_widths: [long];
}

// Data for PermuteOpRecord
table Permute {
  dims: [long];
}

// Data for ReductionOpRecord
table Reduction {
  axes: [int];
  keep_dim: bool;
  dtype: DataType;
}

// Data for ReshapeOpRecord
table Reshape {
  original_shape: [long];
  new_shape: [long];
}

// Data for SliceOpRecord
table Slice {
  start_indices: [long];
  end_indices:[long];
  strides: [long];
}

// Data for SqueezeOpRecord
table Squeeze {
  original_shape: [long];
  squeeze_dims: [long];
}

// Data for TensorRecord
table Tensor {
  sizes: [long];
  contiguity: [Contiguity];
  dtype: DataType;
  is_cpu: bool;
}

// Data for FullOpRecord
// The shape is defined with constant numbers.
table TensorCreation {
  shape: [long];
  dtype: DataType;
}

// Data for RandomOpRecord
// The shape is symbolic.
table TensorCreationSymbolic {
  shape: [State];
  dtype: DataType;
}

// The State struct represents each scalar and tensor value.
// e.g., all input, output and intermediate values in the fusion.
struct State {
  index: int;
  type: StateType;
}

// RecordFunctor is represents operations in the Fusion. It is a node in the
// graph with input and output edges. Some operations require storing extra
// attributes in the RecordData field.
table RecordFunctor {
  args: [State];
  outputs: [State];
  name: string;
  type: RecordType;
  data: RecordData;
}

// The trie node is represents a Node in the trie structure.
// Only the terminal leaf nodes have cached fusions.
table TrieNode {
  record: RecordFunctor;
  children: [ulong];
  fusion_id: ulong;
  visits: ulong;
  is_terminal: bool;
}

// The fusion cache is a prefix tree (trie) of records that caches fusions in
// its leaves. For serialization, we flatten the trie structure using
// breadth-first search.
//
// TODO serialize Fusion cpp container
table FusionCache {
  max_fusions: ulong;
  structure: [TrieNode];
  terminal_nodes: [ulong];
}

root_type FusionCache;
