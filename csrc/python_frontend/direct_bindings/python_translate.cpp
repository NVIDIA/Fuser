// clang-format off
/*
 * SPDX-FileCopyrightText: Copyright (c) 2025-present NVIDIA CORPORATION & AFFILIATES.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 */
// clang-format on
#include <fusion.h>
#include <ir/base_nodes.h>
#include <ir/container.h>
#include <ir/interface_nodes.h>
#include <ir/internal_base_nodes.h>
#include <ops/all_ops.h>
#include <python_frontend/python_bindings.h>
#include <python_frontend/translation_utils.h>
#include <runtime/fusion_executor_cache.h>
#include <runtime/fusion_kernel_runtime.h>
#include <scheduler/tools/inlining.h>
#include <utils.h>
#include <ranges>

namespace nvfuser::python_frontend {

namespace {

// PythonTranslator converts CPP Fusion to an equivalent python definition.
//
// How to add support for an expression not yet overriden by FusionTranslator?
//  1. Create handle function for expression.
//     a. void handle(const SomeOp* op) final
//  2. Create output string for Statement.
//  3. If input argument already exists, map expression's input values to
//     their string names.
//     a. map_val_to_name_.at(op->inputs(...))
//  4. If input argument is a vector, use createVector function.
//  5. If input argument is a scalar constant, use createScalar function.
//  6. Get function name for operation.
//  7. Add CPP Val and output string pair to map_val_to_name_.
//  8. Create string for operation.
//     a. output = operation(inputs...)
class PythonTranslator : public OptInConstDispatch {
 public:
  // Returns a map from the values in the CPP fusion to its corresponding
  // FusionDefinition State index.
  static void print(std::ostream& os, Fusion* fusion) {
    PythonTranslator translator(os, fusion);
    translator.translate();
  }

 private:
  PythonTranslator(std::ostream& os, Fusion* fusion)
      : os_(os), fusion_(fusion) {}

  bool isScheduledTensorView(TensorView* tv) const {
    NVF_ERROR(tv != nullptr);
    const std::vector<IterDomain*>& logical = tv->domain()->logical();
    const std::vector<IterDomain*>& loop = tv->domain()->loop();
    // short-circuit: check same length
    if (logical.size() != loop.size()) {
      return true;
    }

    for (size_t idx : c10::irange(logical.size())) {
      if (logical.at(idx) != loop.at(idx)) {
        return true;
      }
    }
    return false;
  }

  // Check that all of the expression's inputs are defined in FusionDefinition.
  bool checkExpressionDependencies(Expr* e) {
    // TODO Add check_view_dependency
    return std::all_of(
        e->inputs().begin(), e->inputs().end(), [&](const Val* v) {
          return map_val_to_name_.count(v) > 0;
        });
  }

  void translate() {
    os_ << "def nvfuser_fusion(fd : FusionDefinition) -> None :\n";

    // Add Fusion inputs to FusionDefinition
    for (nvfuser::Val* v : fusion_->inputs()) {
      dispatch(v);
    }

    // Gather all expressions in CPP Fusion.
    const std::vector<nvfuser::Expr*> fusion_exprs = fusion_->exprs();
    std::deque<nvfuser::Expr*> to_visit(
        fusion_exprs.begin(), fusion_exprs.end());

    // TODO: Scalar expressions are not handled by Fusion::exprs, so gather them
    // manually.

    // Topological search of Fusion expressions
    size_t skip_count = 0;
    std::unordered_set<nvfuser::Expr*> visited;
    while (!to_visit.empty()) {
      Expr* e = to_visit.front();
      to_visit.pop_front();

      NVF_ERROR(
          skip_count <= to_visit.size(),
          "Cycle detected: None of the expressions can be processed!");

      // short-circuit: skip if already visited
      if (visited.count(e) > 0) {
        continue;
      }

      // TODO: short-circuit: skip Split and Merge expressions created by
      // Reshape
      // TODO: short-circuit: skip Resize expressions created by Slice

      bool is_expr_inputs_valid =
          std::all_of(e->inputs().begin(), e->inputs().end(), [this](Val* v) {
            return !v->isA<TensorView>() ||
                !isScheduledTensorView(v->as<TensorView>());
          });
      NVF_ERROR(
          is_expr_inputs_valid,
          "Found a TensorView with scheduled loop domain.");

      // TODO: Handle scalars and constants not generated by separate
      // expression.

      // short-circuit: add to back of stack if not all of the expression's
      // dependencies are satisfied.
      if (!checkExpressionDependencies(e)) {
        ++skip_count;
        to_visit.push_back(e);
        continue;
      }

      // Create RecordFunctor given inputs, outputs, and attributes.
      visited.insert(e);
      dispatch(e);
      skip_count = 0;
    }

    // Add tensor outputs and handle aliased outputs
    std::unordered_set<nvfuser::Val*> visited_alias_output;
    for (nvfuser::Val* v : fusion_->outputs()) {
      NVF_ERROR(v->isA<TensorView>());
      const AliasInfo& alias_info = fusion_->getOutputAlias(v);
      switch (alias_info.type) {
        case AllocationType::New: {
          handleOutput(v->as<TensorView>());
          break;
        }
        case AllocationType::ReuseBuffer: {
          NVF_THROW("Not implemented");
          break;
        }
        default:
          NVF_THROW("Unsupported AllocationType");
      }
    }
  }

  // Add Tensor value to Fusion Definition
  void handle(const TensorView* tv) final {
    // short-circuit: value already exists in FusionDefinition
    if (map_val_to_name_.count(tv) > 0) {
      return;
    }

    std::vector<int64_t> shape;
    std::transform(
        tv->domain()->logical().begin(),
        tv->domain()->logical().end(),
        std::back_inserter(shape),
        [](IterDomain* id) {
          return (id->getMaybeExpandedExtent()->isConstScalar())
              ? id->getMaybeExpandedExtent()->evaluate().as<int64_t>()
              : -1;
        });

    const std::vector<int64_t>& stride_order = tv->domain()->strideOrder();

    static const std::vector<std::string> argument_names = {
        "shape", "contiguity", "dtype", "is_cpu", "stride_order"};
    generateKwargsOperation(
        "fd.define_tensor",
        argument_names,
        {toString(shape),
         toString(tv->domain()->contiguity()),
         dtypeToPyString(std::get<PrimDataType>(tv->dtype().type)),
         toString(tv->isCpuScalar()),
         (stride_order.empty()) ? std::nullopt
                                : std::make_optional(toString(stride_order))},
        {tv});
  }

  // =================================================================================
  // Handle add_output variants

  // Add Tensor output to FusionDefinition
  void handleOutput(const TensorView* tv) {
    os_ << kTab << "fd.add_output(" << toString(tv) << ")";
  }

  // =================================================================================
  // Map CPP Expression classes to corresponding RecordFunctors in
  // python_frontend

  // Map BinaryOp to python_frontend OpRecord
  void handle(const BinaryOp* bop) final {
    generateOperation(
        "fd.ops." + getString(bop), {bop->lhs(), bop->rhs()}, {bop->out()});
  }

  // =================================================================================
  // String generation utilities

  // Generate a python string for a boolean value.
  std::string toString(bool b) {
    return b ? "True" : "False";
  }

  // Generate a python string for an int64_t value.
  std::string toString(int64_t i) {
    return std::to_string(i);
  }

  // Generate a python string for a boolean value.
  std::string toString(std::optional<bool> b) {
    if (b.has_value()) {
      return toString(b.value());
    } else {
      return "None";
    }
  }

  // Generate a unique name for a Val. Map val to name to track Val's lifetime.
  std::string toString(const nvfuser::Val* v) {
    if (map_val_to_name_.count(v) > 0) {
      return map_val_to_name_.at(v);
    }
    std::stringstream ss;
    if (v->isA<TensorView>()) {
      ss << "tv" << v->name();
    } else if (v->isA<Scalar>()) {
      ss << "s" << v->name();
    } else {
      NVF_THROW("Unsupported Val type");
    }
    std::string name = ss.str();
    map_val_to_name_.emplace(v, name);
    return name;
  }

  // Generate a python list of values.
  template <typename T>
  std::string toString(const std::vector<T>& vec, bool is_list = true) {
    std::stringstream ss;
    if (is_list) {
      ss << "[";
    }
    for (auto&& [i, val] : enumerate(vec)) {
      ss << toString(val);
      if (i < vec.size() - 1) {
        ss << ", ";
      }
    }
    if (is_list) {
      ss << "]";
    }
    return ss.str();
  }

  // Generate a python list of values with string keyword arguments.
  std::string generateNamedList(
      const std::vector<std::string>& argument_names,
      const std::vector<std::optional<std::string>>& args) {
    NVF_ERROR(
        argument_names.size() == args.size(),
        "Input argument names and inputs must have the same size.");
    std::stringstream ss;
    size_t i = 0;
    for (auto&& [name, arg] : zip(argument_names, args)) {
      if (!arg.has_value()) {
        continue;
      }
      if (i > 0) {
        ss << ", ";
      }
      ss << name << "=" << arg.value();
      ++i;
    }
    return ss.str();
  }

  // Generate a python operation with a list of inputs and outputs.
  void generateOperation(
      const std::string& op_name,
      const std::vector<const nvfuser::Val*>& inputs,
      const std::vector<const nvfuser::Val*>& outputs) {
    os_ << kTab << toString(outputs, /*is_list=*/false) << " = " << op_name
        << "(" << toString(inputs, /*is_list=*/false) << ")\n";
  }

  // Generate a python operation with a list of inputs and outputs.
  // A string keyword argument is added for each input.
  void generateKwargsOperation(
      const std::string& op_name,
      const std::vector<std::string>& input_argument_names,
      const std::vector<std::optional<std::string>>& inputs,
      const std::vector<const nvfuser::Val*>& outputs) {
    os_ << kTab << toString(outputs, /*is_list=*/false) << " = " << op_name
        << "(" << generateNamedList(input_argument_names, inputs) << ")\n";
  }

 private:
  //! The stream to print the python function to.
  std::ostream& os_;
  //! The reference CPP fusion to be translated.
  Fusion* fusion_ = nullptr;
  //! Map nvfuser Val to FusionDefinition index.
  std::unordered_map<const nvfuser::Val*, std::string> map_val_to_name_;
  //! Indentation for python code.
  static constexpr const char* kTab = "    ";
};

} // namespace

std::string translateFusion(Fusion* f) {
  std::stringstream ss;
  PythonTranslator::print(ss, f);
  return ss.str();
}

} // namespace nvfuser::python_frontend
