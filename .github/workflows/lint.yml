name: Lint

on:
  pull_request:
  push:
    branches:
      - main

env:
  working_directory: .

jobs:
  # NOTE: enable clang-tidy when we have it cleaned up.
  #clang-tidy:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        submodules: true
  #    - uses: actions/setup-python@v4
  #      with:
  #        python-version: '3.10'
  #    - name: Run lintrunner
  #      working-directory: ${{ env.working_directory }}
  #      run: |
  #        this_dir=$(pwd)

  #        # Install lintrunner
  #        pip install lintrunner

  #        # Initialize lintrunner
  #        lintrunner init 2> /dev/null

  #        # Install cuda
  #        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
  #        sudo dpkg -i cuda-keyring_1.0-1_all.deb
  #        sudo apt-get update
  #        sudo apt-get -y install cuda

  #        # cmake environment variables
  #        export CUDAARCHS=86
  #        export CUDACXX=/usr/local/cuda/bin/nvcc
  #        export PATH=/usr/local/cuda/bin:${PATH}
  #        export CUDA_INSTALL_PATH=/usr/local/cuda

  #        # pytorch environment variables
  #        export TORCH_CUDA_ARCH_LIST="8.6"
  #        export BUILD_NVFUSER=1
  #        export USE_MKLDNN=0
  #        export USE_CUDNN=0
  #        export USE_DISTRIBUTED=0
  #        export NVFUSER_SOURCE_DIR=$this_dir

  #        # Clone pytorch and run cmake build
  #        git clone https://github.com/pytorch/pytorch.git
  #        cd pytorch
  #        python3 -m tools.linter.clang_tidy.generate_build_files
  #        cd $this_dir

  #        # Run lintrunner on all csrc files
  #        # find csrc/ -type f | xargs lintrunner --force-color

  #        # Run lintrunner on all csrc files
  #        this_commit=$(git rev-parse HEAD)
  #        git fetch origin main
  #        git checkout origin/main
  #        head_commit=$(git rev-parse HEAD)
  #        git checkout $this_commit
  #        git --no-pager diff --name-only $head_commit |  grep -e "\.cpp" -e "\.h" |tail | xargs lintrunner --take CLANGTIDY --force-color

  lintrunner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run lintrunner
        working-directory: ${{ env.working_directory }}
        run: |
          # Install lintrunner
          pip install lintrunner

          # Initialize lintrunner
          lintrunner init 2> /dev/null

          # Install dependencies
          sudo apt install -y libtinfo5

          # Run lintrunner except clang-tidy
          lintrunner --force-color --take FLAKE8,MYPY,CLANGFORMAT,NOQA,TYPEIGNORE,NEWLINE,MYPYSTRICT,TABS,SPACES,EXEC,BLACK --all-files

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        working-directory: ${{ env.working_directory }}
        run: flake8

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install clang-format
        run: pip install clang-format==12.0.1.2
      - name: Run clang-format
        working-directory: ${{ env.working_directory }}
        run: |
          find ./csrc -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./test -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./benchmark -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./runtime -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          git --no-pager diff --exit-code
