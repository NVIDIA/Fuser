name: Lint

on:
  pull_request:
  push:
    branches:
      - main

env:
  working_directory: .

jobs:
  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run lintrunner
        working-directory: ${{ env.working_directory }}
        run: |
          this_dir=$(pwd)

          # Install lintrunner
          pip install lintrunner

          # Initialize lintrunner
          lintrunner init 2> /dev/null

          # Install cuda
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-toolkit-12-1

          # cmake environment variables
          export CUDAARCHS=86
          export CUDACXX=/usr/local/cuda/bin/nvcc
          export PATH=/usr/local/cuda/bin:${PATH}
          export CUDA_INSTALL_PATH=/usr/local/cuda

          # Install pytorch
          pip3 install --pre torch --index-url https://download.pytorch.org/whl/nightly/cu121

          # Get submodules
          git submodule sync --recursive
          git submodule update --init --recursive

          # Install other requirements
          pip install -r requirements.txt

          # Run cmake build
          python setup.py --cmake-only

          # Run lintrunner on all csrc files exclude benchmark and test folders
          this_commit=$(git rev-parse HEAD)
          git fetch origin main
          git checkout origin/main
          head_commit=$(git rev-parse HEAD)
          git checkout $this_commit
          git --no-pager diff --name-only $head_commit | grep -e "csrc/.*\.cpp" -e "csrc/.*\.h" | xargs lintrunner --take CLANGTIDY --force-color

  lintrunner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run lintrunner
        working-directory: ${{ env.working_directory }}
        run: |
          # Install lintrunner
          pip install lintrunner

          # Initialize lintrunner
          lintrunner init 2> /dev/null

          # Install dependencies
          sudo apt install -y libtinfo5

          # Run lintrunner except clang-tidy
          lintrunner --force-color --take FLAKE8,MYPY,CLANGFORMAT,NOQA,TYPEIGNORE,NEWLINE,MYPYSTRICT,TABS,SPACES,EXEC,BLACK --all-files

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        working-directory: ${{ env.working_directory }}
        run: flake8 --exclude third_party/

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install clang-format
        run: pip install clang-format==12.0.1.2
      - name: Run clang-format
        working-directory: ${{ env.working_directory }}
        run: |
          find ./csrc -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./test -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./benchmark -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./runtime -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          git --no-pager diff --exit-code
