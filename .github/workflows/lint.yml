name: Lint

on:
  pull_request:
  push:
    branches:
      - main

env:
  working_directory: .

jobs:
  lintrunner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run lintrunner
        working-directory: ${{ env.working_directory }}
        run: |
          this_dir=$(pwd)

          # Install lintrunner
          pip install lintrunner

          # Initialize lintrunner
          lintrunner init 2> /dev/null

          # Install cuda
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda

          # Clone pytorch and run cmake build
          git clone https://github.com/pytorch/pytorch.git
          cd pytorch
          BUILD_NVFUSER=1 NVFUSER_SOURCE_DIR=$this_dir USE_MKLDNN=0 python3 -m tools.linter.clang_tidy.generate_build_files
          cd $this_dir

          echo $this_dir
          ls -ll
          ls -ll ./pytorch/build

          RC=0
          # Run lintrunner on all files
          if ! lintrunner --force-color --all-files --tee-json=lint.json 2> /dev/null; then
            echo ""
            echo -e "\e[1m\e[36mYou can reproduce these results locally by using \`lintrunner\`.\e[0m"
            echo -e "\e[1m\e[36mSee https://github.com/pytorch/pytorch/wiki/lintrunner for setup instructions.\e[0m"
            RC=1
          fi

          # Use jq to massage the JSON lint output into GitHub Actions workflow commands.
          jq --raw-output \
          '"::\(if .severity == "advice" or .severity == "disabled" then "warning" else .severity end) file=\(.path),line=\(.line),col=\(.char),title=\(.code) \(.name)::" + (.description | gsub("\\n"; "%0A"))' \
          lint.json || true
          exit $RC

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        working-directory: ${{ env.working_directory }}
        run: flake8

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install clang-format
        run: pip install clang-format==12.0.1.2
      - name: Run clang-format
        working-directory: ${{ env.working_directory }}
        run: |
          find ./csrc -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./test -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./benchmark -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          find ./runtime -regex '.*\.\(cpp\|hpp\|cu\|c\|h\)' -exec clang-format -style=file -i {} \;
          git --no-pager diff --exit-code
