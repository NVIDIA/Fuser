# Summarize comparison between two benchmark runs. See
# https://github.com/NVIDIA/Fuser/wiki/Developer-guide#benchmark-nvfuser for
# usage.

import argparse
from dataclasses import dataclass
import json
import matplotlib.pyplot as plt
import numpy as np


@dataclass
class Comparison:
    name: str
    base_time: float
    compare_time: float
    change: float

    def __str__(self):
        return f"Benchmark {self.name} changed from {self.base_time} seconds {self.compare_time} ({self.change:.2f}x)"


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "in_json",
        type=str,
        help="The input .json file generated by third_party/benchmark/tools/compare.py",
    )
    parser.add_argument(
        "out_histogram",
        type=str,
        help="The image file that will contain the histogram of time changes",
    )
    args = parser.parse_args()

    comparisons: list[Comparison] = []
    with open(args.in_json) as f:
        data = json.loads(f.read())

    for row in data:
        for measurement in row["measurements"]:
            comparisons.append(
                Comparison(
                    row["name"],
                    measurement["real_time"],
                    measurement["real_time_other"],
                    measurement["time"] + 1,
                )
            )
    comparisons.sort(key=lambda x: x.change)

    # Print top improvements and regressions.
    num_tops = 5
    print(f"Top {num_tops} improvements:")
    for i in range(min(num_tops, len(comparisons))):
        comparison = comparisons[i]
        if comparison.change >= 1:
            break
        print(f"  {comparison}")
    print()
    print(f"Top {num_tops} regressions:")
    for i in range(min(num_tops, len(comparisons))):
        comparison = comparisons[-(i + 1)]
        if comparison.change <= 1:
            break
        print(f"  {comparison}")

    # Generate and save the histogram of time changes.
    plt.xlabel("Time change (compare/base)")
    plt.ylabel("Number of benchmarks")
    n, bins, patches = plt.hist([comparison.change for comparison in comparisons])
    bin_centers = np.diff(bins) / 2 + bins[:-1]
    for bar, count, x in zip(patches, n, bin_centers):
        plt.text(x, count + 0.5, str(count), ha="center", va="bottom")
    plt.savefig(args.out_histogram)
    print()
    print(f"Saved the histogram of time changes to {args.out_histogram}.")
