================================================================================= test session starts ==================================================================================
platform linux -- Python 3.12.3, pytest-8.3.5, pluggy-1.6.0
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /opt/pytorch/nvfuser
plugins: timeout-2.4.0, xdist-3.7.0, random-order-1.2.0, cov-6.2.1, timestamper-0.0.10, shard-0.1.2, benchmark-5.1.0, hypothesis-6.136.6, mpi-0.6
collecting ... collecting 5 items                                                                                                                                                                     collected 5 items / 4 deselected / 1 selected                                                                                                                                          
Running 1 items in this shard

tests/python/multidevice/test_transformer.py Segment the fusion (Original Fusion Un-modified): 
Inputs:
  T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0})
  T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0})
  T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0})
Outputs:
  T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0})
  T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0})
  T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0})

%kernel_math {
T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0})
   = pad( T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, 0, 256} )
i43 = 0 + 128;
T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i43, 128} )
i66 = i43 + 128;
T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i66, 0} )
T6_l___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0})
   = cat( T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0}), T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), 3 )
T7_l___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) = view( T6_l___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0}) )
T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0})
   = __bfloat2float(T7_l___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}));
T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0})
   = squeeze( T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0}), flags = {true, false, false} )
T10_l_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0})
   = reduction( T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0}), op = add, initial value = float(0), allreduce = false )
T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0})
   = __float2bfloat(T10_l_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0}));
T14_l___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0})
   = SegmenterSet( T7_l___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) )
T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0})
   = squeeze( T14_l___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0}), flags = {true, false, false} )
T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0})
   = Set.Permute( T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0}), cache_op=Streaming )
} // %kernel_math 

Segmented_Fusion Dump: -- Re-written complete fusion:{
Inputs:
  T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0})
  T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0})
  T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0})
Outputs:
  T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0})
  T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0})
  T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0})

%kernel_math {
T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0})
   = pad( T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, 0, 256} )
i43 = 0 + 128;
T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i43, 128} )
i66 = i43 + 128;
T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i66, 0} )
T6_g___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0})
   = cat( T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0}), T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), 3 )
T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) = view( T6_g___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0}) )
T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0})
   = __bfloat2float(T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}));
T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0})
   = squeeze( T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0}), flags = {true, false, false} )
T10_g_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0})
   = reduction( T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0}), op = add, initial value = float(0), allreduce = false )
T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0})
   = __float2bfloat(T10_g_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0}));
T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0})
   = SegmenterSet( T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) )
T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0})
   = squeeze( T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0}), flags = {true, false, false} )
T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0})
   = Set.Permute( T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0}), cache_op=Streaming )
} // %kernel_math 

} // {Re-written complete fusion}
Segmented_Fusion Dump: -- fusion segments:
Segmented_Fusion{ 
groups: 
  reduction{1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 620}
  expr_eval{19, 622}
edges: 
  e{ reduction{1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 620} -> expr_eval{19, 622}(T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0})) }

group details:
g{(reduction)
group id: 0
inputs:
  T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0}) __bfloat
  T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0}) __bfloat
  T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0}) __bfloat
outputs:
  T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0}) __bfloat
  T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0}) __bfloat


T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0})
   = pad( T0_g___bfloat[ideviceIdx.x50{1}, bS0{1}, iS51{96}, iS1{2048}, iS3{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, 0, 256} )
(1)
i43 = 0 + 128;
(2)
T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T1_g___bfloat[ideviceIdx.x52{1}, bS4{1}, iS53{96}, iS5{2048}, iS7{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i43, 128} )
(6)
i66 = i43 + 128;
(7)
T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0})
   = pad( T2_g___bfloat[ideviceIdx.x54{1}, bS8{1}, iS55{96}, iS9{2048}, iS11{128}] (DeviceMesh{0}), {0, 0, 0, 0, 0, 0, i66, 0} )
(10)
T6_g___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0})
   = cat( T3_l___bfloat[ideviceIdx.x56{1}, bS12{1}, iS13{2048}, iS57{96}, iS16{384}rf] (DeviceMesh{0}), T4_l___bfloat[ideviceIdx.x58{1}, bS17{1}, iS18{2048}, iS59{96}, iS21{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), T5_l___bfloat[ideviceIdx.x60{1}, bS22{1}, iS23{2048}, iS61{96}, iS26{( ( ( 0 + 128 ) + 128 ) + 128 )}rf] (DeviceMesh{0}), 3 )
(11)
T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) = view( T6_g___bfloat[ideviceIdx.x62{1}, bS27{1}, iS28{2048}, iS63{96}, iS30{384}] (DeviceMesh{0}) )
(13)
T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0})
   = __bfloat2float(T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}));
(14)
T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0})
   = squeeze( T8_l_float[ideviceIdx.x66{1}, bS38{1}, iS39{2048}, iS67{36864}] (DeviceMesh{0}), flags = {true, false, false} )
(15)
T10_g_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0})
   = reduction( T9_l_float[ideviceIdx.x68{1}, iS41{2048}, iS69{36864}] (DeviceMesh{0}), op = add, initial value = float(0), allreduce = false )
(16)
T11_g___bfloat[ideviceIdx.x72{1}, iS73{36864}] (DeviceMesh{0})
   = __float2bfloat(T10_g_float[ideviceIdx.x70{1}, rS43{2048}, iS71{36864}] (DeviceMesh{0}));
(17)
T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0})
   = SegmenterSet( T7_g___bfloat[ideviceIdx.x64{1}, bS31{1}, iS32{2048}, iS65{36864}] (DeviceMesh{0}) )
(620)
i84 = i66 + 128;
(8)
i61 = i43 + 128;
(3)
i64 = i61 + 128;
(4)
}

g{(expr_eval)
group id: 1
inputs:
  T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0}) __bfloat
outputs:
  T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0}) __bfloat
  T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0}) __bfloat


T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0})
   = squeeze( T14_g___bfloat[ideviceIdx.x81{1}, bS78{1}, iS79{2048}, iS82{36864}] (DeviceMesh{0}), flags = {true, false, false} )
(622)
T13_g___bfloat[ideviceIdx.x76{1}, iS48{2048}, iS77{36864}] (DeviceMesh{0})
   = Set.Permute( T12_g___bfloat[ideviceIdx.x74{1}, iS46{2048}, iS75{36864}] (DeviceMesh{0}), cache_op=Streaming )
(19)
}

} //Segmented_Fusion


===== Outer Reduction Stats ========
total_reduction_numel: 2048
total_iteration_numel: 36864
vectorize_factor: 8
redu_unroll_factor: 4
grid(72, 15, 1)
block(64, 8, 1)


===== Reduction Parameters ========

Red On Slow Dim
Circular buffer: not used

Iteration Domain: blockIdx.x / threadIdx.x / multiple reductions per block / vectorize / factor 8
Inner Reduction Domain: cross block - threadIdx.y / cross grid - blockIdx.y / split grid dim / split grid dimension / unroll / factor 4
Launch Parameters: BlockDim.x = 64, BlockDim.y = 8, BlockDim.z = -1, GridDim.x = -1, GridDim.y = 15, GridDim.z = -1, Smem Size = 0
Compile Parameters: index_type = NotSet, maxrregcount = 128, enable_magic_zero = 1, enable_ptxas_verbose = 0, include_paths = 

====================================

.
=================================================================================== MPI Information ====================================================================================
rank: 0
size: 1
MPI version: 3.1
MPI library version: Open MPI v4.1.9a1, package: Open MPI root@sharp-ci-02 Distribution, ident: 4.1.9a1, repo rev: v4.1.5-222-g92f9fca4eb, Unreleased developer copy 
MPI vendor: Open MPI 4.1.9
mpi4py rc: 
mpi4py config:

=========================================================================== 1 passed, 4 deselected in 5.99s ============================================================================
